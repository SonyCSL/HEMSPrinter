{
  "name": "mqtt",
  "description": "A library for the MQTT protocol",
  "version": "1.4.3",
  "contributors": [
    {
      "name": "Adam Rudd",
      "email": "adamvrr@gmail.com"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    }
  ],
  "keywords": [
    "mqtt",
    "publish/subscribe",
    "publish",
    "subscribe"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/mqttjs/MQTT.js.git"
  },
  "main": "mqtt.js",
  "scripts": {
    "test": "mocha",
    "pretest": "npm run check-style",
    "check-style:eslint": "eslint mqtt.js lib/* test/*.js test/browser/*.js test/helpers/*.js",
    "check-style:jshint": "jshint mqtt.js lib/* test/*.js test/browser/*.js test/helpers/*.js",
    "check-style:jscs": "jscs mqtt.js lib/* test/*.js test/browser/*.js test/helpers/*.js",
    "check-style": "npm run check-style:jshint && npm run check-style:jscs && npm run check-style:eslint",
    "browser-test": "zuul --server test/browser/server.js --local --open test/browser/test.js"
  },
  "pre-commit": [
    "test"
  ],
  "bin": {
    "mqtt_pub": "./bin/pub.js",
    "mqtt_sub": "./bin/sub.js",
    "mqtt": "./mqtt.js"
  },
  "engines": {
    "node": ">=0.8.6"
  },
  "browser": {
    "./mqtt.js": "./lib/connect/index.js",
    "fs": false,
    "tls": false,
    "net": false
  },
  "dependencies": {
    "commist": "^1.0.0",
    "concat-stream": "^1.4.7",
    "end-of-stream": "^1.1.0",
    "help-me": "^0.1.0",
    "inherits": "^2.0.1",
    "minimist": "^1.1.0",
    "mqtt-connection": "^2.0.0",
    "mqtt-packet": "^3.2.0",
    "readable-stream": "~1.0.2",
    "websocket-stream": "^2.0.2",
    "xtend": "^4.0.0"
  },
  "devDependencies": {
    "browserify": "^11.0.1",
    "eslint": "^1.3.1",
    "jscs": "^2.1.1",
    "jshint": "^2.6.2",
    "mocha": "*",
    "pre-commit": "1.1.1",
    "should": "*",
    "sinon": "~1.10.0",
    "through2": "^0.6.3",
    "uglify": "^0.1.1",
    "ws": "^0.8.0",
    "zuul": "^3.4.0"
  },
  "readme": "![mqtt.js](https://raw.githubusercontent.com/mqttjs/MQTT.js/137ee0e3940c1f01049a30248c70f24dc6e6f829/MQTT.js.png)\n=======\n\n[![Build Status](https://travis-ci.org/mqttjs/MQTT.js.svg)](https://travis-ci.org/mqttjs/MQTT.js)\n\n[![NPM](https://nodei.co/npm/mqtt.png)](https://nodei.co/npm/mqtt/)\n[![NPM](https://nodei.co/npm-dl/mqtt.png)](https://nodei.co/npm/mqtt/)\n\nMQTT.js is a client library for the [MQTT](http://mqtt.org/) protocol, written\nin JavaScript for node.js and the browser.\n\n* [Upgrade notes](#notes)\n* [Installation](#install)\n* [Example](#example)\n* [Command Line Tools](#cli)\n* [API](#api)\n* [Browser](#browser)\n* [Contributing](#contributing)\n* [License](#license)\n\nMQTT.js is an OPEN Open Source Project, see the [Contributing](#contributing) section to find out what this means.\n\n<a name=\"notes\"></a>\n## Important notes for existing users\n\nv1.0.0 improves the overall architecture of the project, which is now\nsplit into three components: MQTT.js keeps the Client,\n[mqtt-connection](http://npm.im/mqtt-connection) includes the barebone\nConnection code for server-side usage, and [mqtt-packet](http://npm.im/mqtt-packet)\nincludes the protocol parser and generator. The new Client improves\nperformance by a 30% factor, embeds Websocket support\n([MOWS](http://npm.im/mows) is now deprecated), and it has a better\nsupport for QoS 1 and 2. The previous API is still supported but\ndeprecated, as such, it id not documented in this README.\n\nAs a __breaking change__, the `encoding` option in the old client is\nremoved, and now everything is UTF-8 with the exception of the\n`password` in the CONNECT message and `payload` in the PUBLISH message,\nwhich are `Buffer`.\n\nAnother __breaking change__ is that MQTT.js now defaults to MQTT v3.1.1,\nso to support old brokers, please read the [client options doc](#client).\n\n<a name=\"install\"></a>\n## Installation\n\n```sh\nnpm install mqtt --save\n```\n\n<a name=\"example\"></a>\n## Example\n\nFor the sake of simplicity, let's put the subscriber and the publisher in the same file:\n\n```js\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://test.mosquitto.org');\n\nclient.on('connect', function () {\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\n\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  console.log(message.toString());\n  client.end();\n});\n```\n\noutput:\n```\nHello mqtt\n```\n\nIf you want to run your own MQTT broker, you can use\n[Mosquitto](http://mosquitto.org) or\n[Mosca](http://mcollina.github.io/mosca/), and launch it.\nYou can also use a test instance: test.mosquitto.org and test.mosca.io\nare both public.\n\nIf you do not want to install a separate broker, you can try using the\n[server/orig](https://github.com/adamvr/MQTT.js/blob/master/examples/server/orig.js)\nexample.\nIt implements enough of the semantics of the MQTT protocol to\nrun the example.\n\nto use MQTT.js in the browser see the [browserify](#browserify) section\n\n<a name=\"cli\"></a>\n## Command Line Tools\n\nMQTT.js bundles a command to interact with a broker.\nIn order to have it available on your path, you should install MQTT.js\nglobally:\n\n```sh\nnpm install mqtt -g\n```\n\nThen, on one terminal\n\n```\nmqtt sub -t 'hello' -h 'test.mosquitto.org' -v\n```\n\nOn another\n\n```\nmqtt pub -t 'hello' -h 'test.mosquitto.org' -m 'from MQTT.js'\n```\n\nSee `mqtt help <command>` for the command help.\n\n<a name=\"api\"></a>\n##Â API\n\n  * <a href=\"#connect\"><code>mqtt.<b>connect()</b></code></a>\n  * <a href=\"#client\"><code>mqtt.<b>Client()</b></code></a>\n  * <a href=\"#publish\"><code>mqtt.Client#<b>publish()</b></code></a>\n  * <a href=\"#subscribe\"><code>mqtt.Client#<b>subscribe()</b></code></a>\n  * <a href=\"#unsubscribe\"><code>mqtt.Client#<b>unsubscribe()</b></code></a>\n  * <a href=\"#end\"><code>mqtt.Client#<b>end()</b></code></a>\n  * <a href=\"#handleMessage\"><code>mqtt.Client#<b>handleMessage()</b></code></a>\n  * <a href=\"#store\"><code>mqtt.<b>Store()</b></code></a>\n  * <a href=\"#put\"><code>mqtt.Store#<b>put()</b></code></a>\n  * <a href=\"#del\"><code>mqtt.Store#<b>del()</b></code></a>\n  * <a href=\"#createStream\"><code>mqtt.Store#<b>createStream()</b></code></a>\n  * <a href=\"#close\"><code>mqtt.Store#<b>close()</b></code></a>\n\n-------------------------------------------------------\n<a name=\"connect\"></a>\n### mqtt.connect([url], options)\n\nConnects to the broker specified by the given url and options and\nreturns a [Client](#client).\n\nThe URL can be on the following protocols: 'mqtt', 'mqtts', 'tcp',\n'tls', 'ws', 'wss'. The URL can also be an object as returned by\n[`URL.parse()`](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost),\nin that case the two objects are merged, i.e. you can pass a single\nobject with both the URL and the connect options.\n\nYou can also specify a `servers` options with content: `[{ host:\n'localhost', port: 1883 }, ... ]`, in that case that array is iterated\nat every connect.\n\nFor all MQTT-related options, see the [Client](#client)\nconstructor.\n\n-------------------------------------------------------\n<a name=\"client\"></a>\n### mqtt.Client(streamBuilder, options)\n\nThe `Client` class wraps a client connection to an\nMQTT broker over an arbitrary transport method (TCP, TLS,\nWebSocket, ecc).\n\n`Client` automatically handles the following:\n\n* Regular server pings\n* QoS flow\n* Automatic reconnections\n* Start publishing before being connected\n\nThe arguments are:\n\n* `streamBuilder` is a function that returns a subclass of the `Stream` class that supports\nthe `connect` event. Typically a `net.Socket`.\n* `options` is the client connection options (see: the [connect packet](https://github.com/mcollina/mqtt-packet#connect)). Defaults:\n  * `keepalive`: `10` seconds, set to `0` to disable\n  * `clientId`: `'mqttjs'_ + crypto.randomBytes(16).toString('hex')`\n  * `protocolId`: `'MQTT'`\n  * `protocolVersion`: `4`\n  * `clean`: `true`, set to false to receive QoS 1 and 2 messages while\n    offline\n  * `reconnectPeriod`: `1000` milliseconds, interval between two\n    reconnections\n  * `connectTimeout`: `30 * 1000` milliseconds, time to wait before a\n    CONNACK is received\n  * `username`: the username required by your broker, if any\n  * `password`: the password required by your broker, if any\n  * `incomingStore`: a [Store](#store) for the incoming packets\n  * `outgoingStore`: a [Store](#store) for the outgoing packets\n  * `will`: a message that will sent by the broker automatically when\n     the client disconnect badly. The format is:\n    * `topic`: the topic to publish\n    * `payload`: the message to publish\n    * `qos`: the QoS\n    * `retain`: the retain flag\n\nIn case mqtts (mqtt over tls) is required, the `options` object is\npassed through to\n[`tls.connect()`](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback).\nIf you are using a **self-signed certificate**, pass the `rejectUnauthorized: false` option.\nBeware that you are exposing yourself to man in the middle attacks, so it is a configuration\nthat is not recommended for production environments.\n\nIf you are connecting to a broker that supports only MQTT 3.1 (not\n3.1.1 compliant), you should pass these additional options:\n\n```js\n{\n  protocolId: 'MQIsdp',\n  protocolVersion: 3\n}\n```\n\nThis is confirmed on RabbitMQ 3.2.4, and on Mosquitto < 1.3. Mosquitto\nversion 1.3 and 1.4 works fine without those.\n\n#### Event `'connect'`\n\n`function() {}`\n\nEmitted on successful (re)connection (i.e. connack rc=0).\n\n#### Event `'reconnect'`\n\n`function() {}`\n\nEmitted when a reconnect starts.\n\n#### Event `'close'`\n\n`function() {}`\n\nEmitted after a disconnection.\n\n#### Event `'offline'`\n\n`function() {}`\n\nEmitted when the client goes offline.\n\n#### Event `'error'`\n\n`function(error) {}`\n\nEmitted when the client cannot connect (i.e. connack rc != 0) or when a\nparsing error occurs.\n\n### Event `'message'`\n\n`function(topic, message, packet) {}`\n\nEmitted when the client receives a publish packet\n* `topic` topic of the received packet\n* `message` payload of the received packet\n* `packet` received packet, as defined in\n  [mqtt-packet](https://github.com/mcollina/mqtt-packet#publish)\n\n-------------------------------------------------------\n<a name=\"publish\"></a>\n### mqtt.Client#publish(topic, message, [options], [callback])\n\nPublish a message to a topic\n\n* `topic` is the topic to publish to, `String`\n* `message` is the message to publish, `Buffer` or `String`\n* `options` is the options to publish with, including:\n  * `qos` QoS level, `Number`, default `0`\n  * `retain` retain flag, `Boolean`, default `false`\n* `callback` callback fired when the QoS handling completes,\n  or at the next tick if QoS 0.\n\n-------------------------------------------------------\n<a name=\"subscribe\"></a>\n### mqtt.Client#subscribe(topic/topic array/topic object, [options], [callback])\n\nSubscribe to a topic or topics\n\n* `topic` is a `String` topic to subscribe to or an `Array` of\n  topics to subscribe to. It can also be an object, it has as object\n  keys the topic name and as value the QoS, like `{'test1': 0, 'test2': 1}`.\n* `options` is the options to subscribe with, including:\n  * `qos` qos subscription level, default 0\n* `callback` - `function(err, granted)`\n  callback fired on suback where:\n  * `err` a subscription error\n  * `granted` is an array of `{topic, qos}` where:\n    * `topic` is a subscribed to topic\n    * `qos` is the granted qos level on it\n\n-------------------------------------------------------\n<a name=\"unsubscribe\"></a>\n### mqtt.Client#unsubscribe(topic/topic array, [options], [callback])\n\nUnsubscribe from a topic or topics\n\n* `topic` is a `String` topic or an array of topics to unsubscribe from\n* `callback` fired on unsuback\n\n-------------------------------------------------------\n<a name=\"end\"></a>\n### mqtt.Client#end([force], [cb])\n\nClose the client, accepts the following options:\n\n* `force`: passing it to true will close the client right away, without\n  waiting for the in-flight messages to be acked. This parameter is\n  optional.\n* `cb`: will be called when the client is closed. This parameter is\n  optional.\n\n-------------------------------------------------------\n<a name=\"handleMessage\"></a>\n### mqtt.Client#handleMessage(packet, callback)\n\nHandle messages with backpressure support, one at a time.\nOverride at will, but __always call `callback`__, or the client\nwill hang.\n\n-------------------------------------------------------\n<a name=\"store\"></a>\n### mqtt.Store()\n\nIn-memory implementation of the message store.\n\nAnother implementaion is\n[mqtt-level-store](http://npm.im/mqtt-level-store) which uses\n[Level-browserify](http://npm.im/level-browserify) to store the inflight\ndata, making it usable both in Node and the Browser.\n\n-------------------------------------------------------\n<a name=\"put\"></a>\n### mqtt.Store#put(packet, callback)\n\nAdds a packet to the store, a packet is\nanything that has a `messageId` property.\nThe callback is called when the packet has been stored.\n\n-------------------------------------------------------\n<a name=\"createStream\"></a>\n### mqtt.Store#createStream()\n\nCreates a stream with all the packets in the store.\n\n-------------------------------------------------------\n<a name=\"del\"></a>\n### mqtt.Store#del(packet, cb)\n\nRemoves a packet from the store, a packet is\nanything that has a `messageId` property.\nThe callback is called when the packet has been removed.\n\n-------------------------------------------------------\n<a name=\"close\"></a>\n### mqtt.Store#close(cb)\n\nCloses the Store.\n\n<a name=\"browser\"></a>\n## Browser\n\n<a name=\"browserify\"></a>\n### Browserify\n\nIn order to use MQTT.js as a browserify module you can either require it in your browserify bundles or build it as a stand alone module. The exported module is AMD/CommonJs compatible and it will add an object in the global space.\n\n```javascript\nnpm install -g browserify // install browserify\ncd node_modules/mqtt\nnpm install . // install dev dependencies\nbrowserify mqtt.js -s mqtt > browserMqtt.js // require mqtt in your client-side app\n```\n\n<a name=\"webpack\"></a>\n### Webpack\n\nJust like browserify, export MQTT.js as library. The exported module would be `var mqtt = xxx` and it will add an object in the global space. You could also export module in other [formats (AMD/CommonJS/others)](http://webpack.github.io/docs/configuration.html#output-librarytarget) by setting **output.libraryTarget** in webpack configuration.\n\n```javascript\nnpm install -g webpack // install webpack\n\ncd node_modules/mqtt\nnpm install . // install dev dependencies\nwebpack mqtt.js ./browserMqtt.js --output-library mqtt\n```\n\nyou can then use mqtt.js in the browser with the same api than node's one.\n\n```html\n<html>\n<head>\n  <title>test Ws mqtt.js</title>\n</head>\n<body>\n<script src=\"./browserMqtt.js\"></script>\n<script>\n      var client = mqtt.connect(); // you add a ws:// url here\n      client.subscribe(\"mqtt/demo\");\n\n      client.on(\"message\", function(topic, payload) {\n        alert([topic, payload].join(\": \"));\n        client.end();\n      });\n\n      client.publish(\"mqtt/demo\", \"hello world!\");\n    </script>\n</body>\n</html>\n```\n\nYour broker should accept websocket connection (see [MQTT over Websockets](https://github.com/mcollina/mosca/wiki/MQTT-over-Websockets) to setup [Mosca](http://mcollina.github.io/mosca/)).\n\n<a name=\"contributing\"></a>\n## Contributing\n\nMQTT.js is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mqttjs/MQTT.js/blob/master/CONTRIBUTING.md) file for more details.\n\n### Contributors\n\nMQTT.js is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Adam Rudd</th><td><a href=\"https://github.com/adamvr\">GitHub/adamvr</a></td><td><a href=\"http://twitter.com/adam_vr\">Twitter/@adam_vr</a></td></tr>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"http://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n</tbody></table>\n\n<a name=\"license\"></a>\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mqttjs/MQTT.js/issues"
  },
  "_id": "mqtt@1.4.3",
  "dist": {
    "shasum": "7ae38ee22dcbbafda67a828845485380c57bf055"
  },
  "_from": "mqtt@",
  "_resolved": "https://registry.npmjs.org/mqtt/-/mqtt-1.4.3.tgz"
}
